#+TITLE: Danvy Notes and Clues 
#+LATEX_COMPILER: xelatex
#+LATEX_HEADER: \usepackage[AUTO]{polyglossia}
#+LATEX_HEADER: \usepackage{upquote}
#+LATEX_HEADER: \setmonofont{DejaVuSansMono}[Scale=MatchLowercase]

* Abstract 

#+BEGIN_QUOTE
For example, we derive a continuation monad as a Church encoding of
the list monad.
#+END_QUOTE

Notice he does not say that we achieve CPS, but that instead we derive
a continuation monad. Which, apparently, doesn't demand CPS? What does
*a* continuation monad mean, other than it's perforce a monad. 

* Semantics of a Subset of Icon

Danvy side-steps issues of infinite loops and termination. His
language is completely terminating. That's a pretty nifty trick that
lets him side-step a whole lot of issues. [[https://dl.acm.org/doi/pdf/10.1145/1016850.1016861][Wand and Vallaincourt]] have
something more useful to say on recursion and such.

I also don't see why we needed to add the ~if_emptyM~ operation. It
seems to me that we can macro-express that with plain old ~bind~, as
follows:[fn:1]

#+BEGIN_SRC racket
(M a) >>= (lambda (x)
	    (if x
		M b
		M b'))
#+END_SRC

The other two do matter, at the very least it'd take something to
express them one in terms of the other, and we also have some laws
surrounding them. But I don't know of any such laws for ~if_emptyM~.


** 2.5  A Spectrum of Semantics

#+BEGIN_QUOTE
In an eager language such as ML, a list-based interpreter always
computes all results. Such behavior may not be desirable in a
situation where only the first result is of interest (or, for that
matter, whether there exists a result): Consider for example the
conditional, which examines whether a given expression yields at least
one result or fails. An alternative is to use laziness.
#+END_QUOTE

Danvy also points to the conditional here, as a situation in which we
might not *want* to compute all of these at once. This comment only
makes sense in light of the earlier version *doing* this computation
AOT.

** 2.5 [3] A Continuation-based Interpreter

So, the part that had been really getting me, if I had to crystallize
it, was 

#+BEGIN_QUOTE 
A conceptual link between the list monad and the continuation monad
with answer type β list → β list can be made through a Church
encoding) of the higher-order representation of lists proposed by
Hughes.
#+END_QUOTE

To reiterate, we're linking the list monad above with the continuation
monad. We know the type constructor is ~(α → R) → R~, with answer type
~R~. So we can, for instance, think of ~α → R~ as a one-hole context:
an ~R~ with an ~α~ shaped hole in it somewhere.

Here we're saying that ~R~ must be ~β list → β list~. We get the link
by Church encoding the Hughes lists. 

Skipping down to the last code of this page, the tl;dr is that we
represent lists as "prefix functions." Rather than a data structure,
we define a list by the behavior of prepending it to another
list. Which is a fine thing to do! Sure! Why not!? Point being, it
seems that the Hughes definition of a ~β list~ has type ~β list → β
list~. Notice that for Hughes, the partially-applied ~cons x~ is
effectively ~[x]~. This importantly means you can't ~cons x~ onto
~cons x~ and expect to get a regular plain-ol' list back out.

He says it's the /Church encoding/ of a Hughes representation that
gets us there, though. The ~λys.~ isn't part of the Church
encoding. That came with the Hughes lists. 

I'm thinking by analogy with the Church-encoded numerals e.g,
~λs.λz.s(sz)~. I think maybe we've encoded the Church numerals in the
same way. Strictly speaking, nil isn't a selector function. So before
abstracting over, this would be ~λz.add1(add1 z)~. That's a
Hughes-style higher-order encoding of numerals, but not then Church
encoded. The first-order representation, would then be ~add1 (add1
0)~, which actually makes sense.

Danvy points out that ~nil~ and ~cons x~ both have the same type, and
that is ~selector-function → old-list-rep →
old-list-rep~. (~old-list-rep~ is right now how I'm saying ~β list~
from above). 

He says that this is ~(α → β → β) → β → β~, because we're writing
these at the most generic types possible here. We specialize it in the
next paragraph. Danvy wrote me and said that this ~β~ isn't the same
~β~ as in ~β list~. That any other variable name would have been
better here b/c there's a possible confusion. The same way ~cons~
can`t take an ~α and β list~, b/c those types don't line up, so ~α~
and ~β~ are more general than we want. It's the same thing for ~β~
here.

How wild is it that it takes me almost a year and half a paper's worth
of prose to read and understand someone else's paper?

* 2.5 [4] 

We *know* that the 1-continuation monad version is not written in
CPS. Danvy's statement at the beginning of ~[4]~,

#+BEGIN_QUOTE
A tail-recursive implementation of a continuation-based interpreter
for Icon uses explicit success and failure continuations.
#+END_QUOTE

only makes sense in the context of the 1-continuation version being
*not* tail recursive. We have read this correctly; it's deliberate. 

I think, further, that ~C₂~ has the subscripted ~2~ not because it's
the second version of a continuation-based semantics, but simply
because those places use two continuations. This would explain why we
see ~C₂~ in Figure 5: Here, we really do have and make use of two
continuations. This conditional/choice operation here is the only
place in the Figure 5 interpreter (as it is presently written) that we
see the second continuation, or the list argument, explicitly
exposed. We do see it show up in the return values of those help
functions, and we do see it buried in the non-tail composition
operator. But that ~ifte~ operation is the only place that we have to
expose, explicitly, the ~λl.~—because we need to duplicate it in the
body.

I don't have it *quite* yet, but compare the below. Bear in mind that
the variable names here kinda collide; he'd've much improved the whole
thing by using fresh meta-variable names throughout.

#+BEGIN_EXAMPLE
 (α →     R)       →      R         ;; This he says 2.5 [3] is the definition of the type constructor.
 (i → (1 → α) → α) → (1 → α) → α    ;; In fig 6's page, pgh 3 he's saying the R is (1 → α) → α
 (i →    β    → β) →    β    → β    ;; Before, R was β → β, for any β (e.g. γ list) 
#+END_EXAMPLE

Figures 5 and 6 both show definitions of monadic interpreters where
monad operations are in-lined and the expressions ~β~-reduced. The ~C~
and ~C₂~ versions both beta reduce away the "inner continuation"
parts, because they don't do any choosing or accumulating; they just
evaluate the pieces and then pass them off. Which is to say, the RHSs
of the other ones look the same *because* we pulled out those two
"help functions", and they didn't do anything. 

It still bears discussing/thinking how ~λl.l~ transforms into
~f()~. But this is getting closer. How's that? 

We know that, given the interpreter in Figure 5, we'd have to CPS ([[https://pdfs.semanticscholar.org/a9f0/aa4118e29f94d904a21810f83499ae13a98f.pdf][à
la Fischer]]) the RHS to get it in a tail-recursive form. True. And we
do that in the move from Figure 5 to Figure 6.

The two-continuation version *is* a built of a meta continuation and
an OG continuation. So, we *do* have something of a quadrant here,
comparing list and stream, and C and C₂. I don't know about directly
comparing the lists and streams. (Yet!)

Here's the money quote, though, I think.

#+BEGIN_EXAMPLE
Just as the continuation monad from Fig. 4 can be conceptually linked to the
list monad, the present continuation monad can be linked to the stream monad
by a Church encoding of the data type of streams:
#+END_EXAMPLE


We *do* in fact have (something like) the picture that I thought we did.

I do not understand below how we move from END to lambda e.e(). End
looks the same as Nil, a nullary constructor. Since Nil is \l.l, and
it's a uniform transformation over datatypes, why isn't End \e.e? Cons
and More don't line up, we have the explicit delay in the cdr of
More. So the disparity between those two makes some sense. Esp when we
recognized the connection between More and NonIn

To consider: maybe if I think of the streams like codata. 





#+BEGIN_QUOTE
| τ List                                                                 | ≡                                       | Nil                                             | Cons of (τ × τ List)                            | \= | thunk datatype's cdrs | ⇒ | τ Stream                                                                                           | ≡                                       | End                                             | More of (τ × (1 → τ Stream))                    |
|                                                                        | abstract over tail                      |                                                 | new type, new constructors                      |    |                       |   | (NB: Hughes streams come in thunkd)                                                                | abstract over thunked tail              |                                                 | new types, new constructors                     |
| τ HList =_df τ List → τ List                                           | ≡                                       | λl.l : τ HList                                  | λl.Kons of (τ x l) : τ HList                    | \= |                       | ⇒ | τ HStream =_df (1 → τ Stream) → τ Stream                                                           | ≡                                       | λe.e() : τ HStream                              | λe.Mure of (τ × e) : τ HStream                  |
|                                                                        | curry Kons                              |                                                 |                                                 |    |                       |   |                                                                                                    | curry Mure                              |                                                 | same type b/c we don't prematurely eval e       |
| τ HList                                                                | ≡                                       | λl.l : τ HList                                  | λl.((cKons of τ) l) : τ HList                   | \= |                       | ⇒ | τ HStream                                                                                          | ≡                                       | λe.e() : τ HStream                              | λe.((cMure of τ) e) : τ HStream                 |
|                                                                        | Church encode (abstract over selector)  |                                                 | new type, new constructors                      |    |                       |   | Church encode (abstract over selector)                                                             |                                         |                                                 | new type, new constructors                      |
| τ CList =_df (τ → τ HList) → τ HList                                   | ≡                                       | Nul \= λsc.λl.l : τ CList                       | Qons x \= λsc.λl.(sc x) l : τ CList             | \= |                       | ⇒ | τ CStream =_df (τ → τ HStream)  → τ HStream                                                        | ≡                                       | Ind \= λsm.λe.e() : τ CStream                   | Just x \= λsm.λe.(sm x) e : τ CStream           |
|                                                                        |                                         |                                                 | where Qons : τ → τ CList                        |    |                       |   |                                                                                                    |                                         |                                                 | And Just : τ → τ CStream                        |
|                                                                        |                                         |                                                 |                                                 |    |                       |   |                                                                                                    |                                         |                                                 | However, also we could equally well construct   |
|                                                                        |                                         | Unchanged from above                            | NonIn x xs \= λsc.λl.(sc x) xs : τ CList        |    |                       |   |                                                                                                    |                                         | Unchanged from above                            | Mower x xs \= λsm.λe(sm x) xs : τ CStream       |
|                                                                        |                                         |                                                 | Unchanged from above                            |    |                       |   |                                                                                                    |                                         |                                                 | And Mower \= τ → (τ → τ CStream) → τ CStream    |
|                                                                        | α  equivalent to                        |                                                 |                                                 |    |                       |   |                                                                                                    | α equivalent to                         |                                                 |                                                 |
|                                                                        | ≡                                       | Nul \=  λk.λl.l : τ CList                       | Qons x \= λk.λl.((k x) l)  : τ CList            | \= |                       | ⇒ |                                                                                                    | ≡                                       | Ind \= λk.λf.f() : τ CStream                    | Mower x xs \= λk.λf.(k x) xs : τ CStream        |
|                                                                        |                                         | true just b/c λl.l : τ HList                    | Here l ηs away                                  |    |                       |   |                                                                                                    |                                         |                                                 |                                                 |
| τ (τ HList) C =_df (τ → τ HList) → τ HList                             |                                         | Nul \=  λk.λl.l : τ (τ HList) C                 | Qons x \= λk.λl.((k x) l)  : τ (τ HList) C      | \= |                       | ⇒ | τ (τ HStream) C₂ =_df (τ → τ HStream) → τ HStream                                                  |                                         | Ind \= λk.λf.f() : τ (τ HStream) C₂             | Mower x xs \= λk.λf.(k x) xs : τ (τ HStream) C₂ |
|                                                                        | an instance of the more general         |                                                 |                                                 |    |                       |   |                                                                                                    | an instance of the more general         |                                                 |                                                 |
| τ (σ HList) C =_df (τ → σ HList) → σ HList                             |                                         | Uniformly change the type                       | Uniformly change the type                       |    |                       |   | τ (σ HStream) C₂ =_df (τ →  σ HStream) → σ HStream                                                 |                                         | uniformly change the type                       | uniformly change the type                       |
|                                                                        | an instance of the more general         |                                                 |                                                 |    |                       |   |                                                                                                    | an instance of the more general         |                                                 |                                                 |
| τ (σ List → σ List) C =_df (τ → (σ List → σ List)) → (σ List → σ List) |                                         | Uniformly change the type                       | Uniformly change the type                       |    |                       |   | τ ((1 → σ Stream) → σ Stream) C₂ =_df (τ →  (1 → σ Stream) → σ Stream) → (1 → σ Stream) → σ Stream |                                         | Uniformly change the type                       | uniformly change the type                       |
|                                                                        | an instance of the more general         |                                                 |                                                 |    |                       |   |                                                                                                    | an instance of the more general         |                                                 |                                                 |
| τ (δ → δ) C =_df (τ → (δ → δ)) → (δ → δ)                               |                                         | Uniformly change the type                       | Uniformly change the type                       |    |                       |   | τ ((1 → δ) → δ) C₂ =_df (τ →  (1 → δ) → δ) → (1 → δ) → δ                                           |                                         | Uniformly change the type                       | uniformly change the type                       |
|                                                                        | an instance of the more general         |                                                 |                                                 |    |                       |   |                                                                                                    | an instance of the more general         |                                                 |                                                 |
| τ γ C =_df (τ → γ) → γ for answer type γ                               |                                         | This type is too general for these two programs | This type is too general for these two programs |    |                       |   | τ γ C₂ =_df (τ → γ) → γ for answer type γ                                                          |                                         | This type is too general for these two programs | This type is too general for these two programs |
|                                                                        | which notationally we normally elide as |                                                 |                                                 |    |                       |   |                                                                                                    | which notationally we normally elide as |                                                 |                                                 |
| τ C =_df (τ → γ) → γ for answer type γ                                 |                                         |                                                 |                                                 |    |                       |   | τ C =_df (τ → γ) → γ for answer type γ                                                             |                                         |                                                 |                                                 |
|                                                                        |                                         |                                                 |                                                 |    |                       |   |                                                                                                    |                                         |                                                 |                                                 |
#+END_QUOTE


Like a burning building ... 

#+BEGIN_QUOTE
| from CList           | from CStream           |
| λm.(((m cCons) Nil)) | λm.((m Just) (λ1.Nil)) |
|                      |                        |
#+END_QUOTE

There is something here interesting about ~cMore~. Because that ~xs~
comes from effectively nowhere, we have to return something that will
demand the ~xs~ in order to continue.

* Our Version 

What's difficult about this version is that we have this ~delay~
operator. That's the trouble. The datatype doesn't *start* lazy, it's
constructed from a computation that *produces* a DList.

This feels monadic. The constructor takes in a computation. And what
do we mean by a computation? We mean a function from <something?> that
produces a ~lazy~ DList. 

The Delay constructor itself isn't lazy. The delay constructor eagerly
consumes the computation. That's fine. It's that there's something
lazy about what that computation _produces_. So, what is it that such
a computation produces, and does that mean that the datatype of the
computation is now mutually dependent upon the type of the DList?

So then, what is a computation C? ~τ~ are the types of the elements of
the streams. These were numbers for Danvy. For us, ~τ~s are states.

We don't need to care that we are using these computations for logic
programming relations. What do we care about? Could it be just that
the constructor itself takes in the Delayed stream? Could that be
sufficient? And we don't care, for the purposes of this dotatype and
constructor, how it got that way? So, that is, Delay of 

The computation for us *actually* is the
arguments to the relation. What *must* those be?

One might think of these as a function from a computation that
produces a stream of taus to a () -> List Taus. I don't know how to
think about that stuff.

#+BEGIN_QUOTE
| C : C τ → (1 → τ Stream) |
#+END_QUOTE

However, that expression just evaluates to a stream of some kind. I
don't know if the fact of how the code creates the stream matters.

I'm re-reading the "... Without Even Being Odd" paper, to remind
myself of how this related in with our stream definitions. This was
getting temporarily confusing. I think that I can start off from
either the Even style with difficulty or the Odd style with
difficulty, and try and get to one or the other. The implementations
in this paper offer a map operator (bind), an infinite stream
generator (useful), and the DTs themselves.

Our relations look like their countdown from the even style
w/difficulty.

| () -> DT a | Delay DT a | 

#+BEGIN_QUOTE
| DT a | :     | Nil | End                    | Cons a DT a                  | More/arg a (() -> DT a)          | Delay |
|      |       |     | λl.l()                 | λl.cons a l                  | λl.more a l                      |       |
|      |       |     | λl.l()                 | λl.(cons a) l                | λl.(more a) l                    |       |
| must | fix   |     | an                     | order                        | all                              |       |
|      |       |     | λc.λm2.λl.l()          | λc.λm2.λl.(c a) l            | λc.λm2.λl.(m2 a) l               |       |
| now  | we    |     | will                   | create                       | each                             |       |
|      |       |     | End = λc.λm2.λl.l()    | Cons a = λc.λm2.λl.(c a) l   | More2 a xs = λc.λm2.λl.(m2 a) xs |       |
| The  | above |     | might be wrong becaues | we might need an  on the END | This xs must be a thunk?         |       |
|      |       |     |                        |                              |                                  |       |
#+END_QUOTE



#+BEGIN_QUOTE
| τ DList                                    | ≡ | Nil               | Cons of (τ × τ DList)           | Delay of (1 → τ DList)         |                                                               |
| Change representing a sometimes thunkd cdr |   |                   |                                 |                                |                                                               |
| τ DStream                                  | ≡ | End               | Cons of (τ × τ DStream())       | Delay of τ DStream             | Don't know about this representation of what's going on       |
| τ HDStream =_df τ DStream → τ DStream      |   | λl.l() : τ HDList | λl.Kons of (τ x l()) : τ HDList | λe.Dilay of τ DList : τ HDList | I think somehow we say that invoking a DStream gets a DStream |
|                                            |   |                   |                                 |                                |                                                               |
|                                            |   |                   |                                 |                                |                                                               |
#+END_QUOTE


** Mitch and I find a bug in Danvy in that ifEmptyC takes the xs and ys arguments in the wrong order.

** We also discover a notational bug, that only if one reads the C2 expressions as uncurried are they in tail-form. Otherwise, they aren't

Based on that we discover how, precisely, the thunking of the cdrs of the datatypes takes a non-tail form expression to tail form: b/c the thunk delays the evaluation of a nested computation. 

So. What we've discovered, I think, is that the problem is the
following: we must take this "thunking the cdrs", a meta-operation
over the datatypes transforming a DT from one to another, and now make
it /internal/ /to/ the DT itself.

Then oughtn't we be able to reach what we're after as a result of sk/fk transformation over the CBV encoding of the delay terms? 

This might argue for building force and delay as components of the
easy language, and run of the delay monad, and then trying to build
this operation on top of /that/? Stacked /that/ way?

#+BEGIN_SRC racket
(define (valof-cps e env-cps k)
  (match e
    ;;  ...
    [`(delay ,e1) (lambda (k) (valof-cps env-cps k))]
    [`(force ,d-exp) (valof-cps d-exp env-cps (lambda (del) (del k)))]
    [`(lambda (,x) ,body)
     (lambda (a k)
       (valof-cps body
                  (lambda (y k^)
                    (if (eqv? x y)
                        (k^ a)
                        (env-cps y k^)))
                  k))] 
    [`(,rator ,rand)
     (valof-cps rator env-cps
                (lambda (p-cps)
                  (valof-cps rand env-cps
                             (lambda (a)
                               (p-cps a k)))))]))
#+END_SRC

But it might also well be that we /can't/ simply define the lambdas themselves with datatypes, and that's probably so. 

http://blog.ielliott.io/lambdas-are-codatatypes/

Maybe I have to do something with them, or think about it that way.

We'll build our (here, below "a"s) with the λ encoding, and we'll know
something about how that's constructed, that will guarantee to *allow*
us to build a delay operation. Pass along the parameters to an
underlying lambda. Go from there. 

CPS a la Fischer or CPS a la Plotkin?

#+BEGIN_QUOTE
| DT a | :                                     | Nil                  | Cons a DT a                  | More a DT a                        | Delay DT a             |                                                |
|      |                                       | λk.λl.k l            | λk.λl.k (cons a l)           |                                    | λk.λl.k (λk. (l k))    |                                                |
|      | or to reorder the ks                  | λl.λk.k l            | λl.λk.k (cons a l)           |                                    | λl.λk.k (λk. (l k))    |                                                |
|      | do we need that eta, or can we reduce |                      |                              |                                    | λl.λk.k l              | we must not need the eta, since we pass as arg |
|      | so how do you CSP the delay part      | Nil := λsk.λl.λk.k l | Cons x := λsk.λl.λk.(sc x l) | More x xs := λsk.λl.λk.((sk x) xs) | Delay := λsk.λl.λk.k l |                                                |
|      | This is like our operator             |                      |                              |                                    |                        |                                                |
|      | which means l must be...?             |                      |                              |                                    |                        |                                                |
#+END_QUOTE

The thing is, we have to be producing Delaying a DT a. That's what it has to be a delay *of*. 
So whatever we get when we invoke the delay (with Run, that is) must itself be a DT. 

It might be we just return the underlying delayed operation. 
It might be we return a bundle of the success and failure computations back up? 

| from CList           |   |
| λm.(((m cCons) Nil)) |   |
|                      |   |

And this has to be it. ~f (Y f) = (Y f)~

#+BEGIN_QUOTE
(run 1 (q) (foo q))

(define-relation (foo q) 
  (disj (== 'a q) (foo q)))
#+END_QUOTE

<Delay>
Δ (foo q)

Delay Shift Reset

<Δ (foo q), iSK, iFK>







* Footnotes

[fn:1] See though, the remark we highlight in 2.5. This seems to
suggest that he *intends*, especially, for all three pieces to
evaluate eagerly, and then we select over it. The way the naive,
malformed CPS transform of an if would evaluate all three pieces and
then choose. 



